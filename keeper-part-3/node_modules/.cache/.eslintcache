[{"C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\index.js":"1","C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\App.jsx":"2","C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\Header.jsx":"3","C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\Footer.jsx":"4","C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\CreateArea.jsx":"5","C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\Note.jsx":"6"},{"size":853,"mtime":1631791422668,"results":"7","hashOfConfig":"8"},{"size":5321,"mtime":1632484947183,"results":"9","hashOfConfig":"8"},{"size":139,"mtime":1631099709150,"results":"10","hashOfConfig":"8"},{"size":192,"mtime":1631099709139,"results":"11","hashOfConfig":"8"},{"size":3531,"mtime":1632485482561,"results":"12","hashOfConfig":"8"},{"size":976,"mtime":1632484988384,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1sor405",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\index.js",[],["29","30"],"C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\App.jsx",["31"],"import React, {useState} from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Note from \"./Note\";\nimport CreateArea from \"./CreateArea\";\n\nfunction App() {\n\n    /*\n    1. Implement the add note functionality.\n        In the app component - Add new note to an array.\n\n        The array will need state because it's going to be changed\n        the initial value for the notes will be an empty array\n     */\n    const [notes, setNotes] = useState([]);\n\n    /*\n    1. Implement the add note functionality.\n    Pass the new note back to the App component\n\n    Trigger a function (addNote) that can pass the note back\n    over to the App.jsx we have to pass in a function\n    as a prop to do that, it will receive a note object\n    and will do something with the object\n\n    the addNote will be added as a value to one of the\n    props for the CreateArea (onAdd) and we will\n    set it equal to addNote\n\n    the value of newNote comes from CreateArea.jsx from the\n    function submitNote(event)...\n    */\n    function addNote(newNote){\n        console.log(newNote);\n\n        /*\n    1. Implement the add note functionality.\n        In the app component - Add new note to an array.\n\n        add to the notes array\n        inside the setNotes function we can get hold of the\n        previous notes or whatever is the previous value of\n        the notes array\n     */\n        setNotes(prevNotes => {\n        /*\n        Use the spread operator to add to the notes arrays so\n        that we get hold of all of the previous notes and then\n        add the new note at the end\n\n        the value of newNote comes from CreateArea.jsx from the\n        function submitNote(event)...\n         */\n            return [...prevNotes, newNote];\n        });\n    }\n\n    {/*\n        2. Implement the delete note functionality.\n        Callback from the Note component to trigger a delete function.\n\n        Get the delete button to trigger a function in the App.jsx\n        and we need the props to do it, inside the function we will\n        to trigger a function that gets passed over from the props that\n        will delete this note from the array\n\n        deleteNote function - we will need the id of the note\n        that needs to be deleted, then this function will be\n        passed over to each of these notes that gets rendered\n        on the below code - {notes.map(noteItem... - as a property\n        */}\n    function deleteNote(id){\n        console.log(\"Delete was triggered\");\n\n        /*\n        Once we have access to all of the previous notes array\n        we can loop through it using the filter function\n         */\n        setNotes(prevNotes =>  {\n            /*\n            the filter function can take up to 3 arguments\n            1st - value that we are currently looping through in the array (noteItem)\n            2nd - the index of the noteItem\n             */\n            return prevNotes.filter((noteItem, index) => {\n                /*\n                return all of the notes where the index is not equal to the\n                id of the note that needs to be deleted\n\n                This way we should end up with an array that contains everything\n                in the prevNotes other than the ones where the index matches the id\n                of the note to be deleted\n\n                the last thing to do is to pass over the index of the note\n                that is being deleted through this deleteNote function\n                 */\n                return index !== id;\n            })\n        })\n    }\n\n  return (\n    <div>\n      <Header />\n      <CreateArea\n\n          /*\n            1. Implement the add note functionality.\n            Pass the new note back to the App component\n\n            Trigger a function (addNote) that can pass the note back\n            over to the App.jsx we have to pass in a function\n            as a prop to do that, it will receive a note object\n            and will do something with the object\n\n            the addNote will be added as a value to one of the\n            props for the CreateArea (onAdd) and we will\n            set it equal to addNote\n            */\n          onAdd={addNote}\n          />\n\n        {/*\n        1. Implement the add note functionality.\n        Take array and render separate Note components for each item.\n\n        Use the notes array and map through it to render a different note\n        component for each item inside the array\n\n        the map will take an arrow function, and for each of the noteItem \n        inside the notes array, then return a new note component and\n        this note component will need some properties (title, content)\n        passed over\n\n        add curly braces around the code below for it to be recognized as JS code\n        */}\n        { notes.map((noteItem, index) => {\n        return <Note\n\n            /*\n            2. Implement the delete note functionality.\n            Pass a id over to the Note component, pass it back to the App when deleting,\n            in order to identify the Note that needs to be removed from the array\n            */\n            key={index}\n            id={index}\n            title={noteItem.title}\n            content={noteItem.content}\n\n            onDelete={deleteNote}\n        />\n    })}\n\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\Header.jsx",[],"C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\Footer.jsx",[],"C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\CreateArea.jsx",[],"C:\\Users\\risch\\Documents\\Richard\\Studies\\Udemy\\The Complete 2020 Web Development Bootcamp\\Code\\React.js Module\\keeper-app\\keeper-part-3\\src\\components\\Note.jsx",["32"],"import React from \"react\";\n\nfunction Note(props) {\n\n    {/*\n        2. Implement the delete note functionality.\n        Callback from the Note component to trigger a delete function.\n\n        Get the delete button to trigger a function in the App.jsx (deleteNote(id))\n        and we need the props to do it, inside the function we will\n        to trigger a function that gets passed over from the props that\n        will delete this note from the array\n        */}\n    function handleClick(){\n        props.onDelete(props.id)\n    }\n\n  return (\n    <div className=\"note\">\n      <h1>{props.title}</h1>\n      <p>{props.content}</p>\n\n        {/*\n        2. Implement the delete note functionality.\n        Callback from the Note component to trigger a delete function.\n\n        Get the delete button to trigger a function in the App.jsx\n        and we need the props to do it\n        */}\n      <button onClick={handleClick}>DELETE</button>\n    </div>\n  );\n}\n\nexport default Note;\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":59,"column":5,"nodeType":"39","messageId":"40","endLine":72,"endColumn":12},{"ruleId":"37","severity":1,"message":"38","line":5,"column":5,"nodeType":"39","messageId":"40","endLine":13,"endColumn":12},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]